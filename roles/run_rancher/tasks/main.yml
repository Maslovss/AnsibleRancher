---
# tasks file for run_rancher
- name: Start Rancher container
  docker_container:
    name: "{{ rancher_container_name }}"
    image: "{{ rancher_docker_image }}"
    detach: yes
    privileged: yes
    restart_policy: always
    ports:
      - "80:80"
      - "443:443"
  when: tested == "no"

- pause:
    minutes: 5
  when: tested == "no"

- name: Check server up
  uri:
    url: "https://{{ rancher_server_ip }}/ping"
    validate_certs: no
    return_content: yes
  register: ping_answer
  until: ping_answer.content == "pong"
  retries: 30
  delay: 20
  when: tested == "no"

- pause:
    minutes: 5
  when: tested == "no"

- name: Check server up
  uri:
    url: "https://{{ rancher_server_ip }}/ping"
    validate_certs: no
    return_content: yes
  register: ping_answer
  until: ping_answer.content == "pong"
  retries: 30
  delay: 20

# https://127.0.0.1/v3-public/localProviders/local?action=login

- name: Rancher login with default password
  uri:
    url: "https://{{ rancher_server_ip }}/v3-public/localProviders/local?action=login"
    method: POST
    return_content: yes
    validate_certs: no
    body_format: json
    body:
      username: "{{ rancher_default_username }}"
      password: "{{ rancher_default_password }}"
    status_code: 201
  register: login
  ignore_errors: yes

#If we cant login with default try new password

- name: Set vars
  set_fact:
    rancher_new_password_activated: "yes"
  when: login.status  | int == 401

- name: Rancher try login with new password
  vars:
    rancher_new_password_activated: "yes"
  uri:
    url: "https://{{ rancher_server_ip }}/v3-public/localProviders/local?action=login"
    method: POST
    return_content: yes
    validate_certs: no
    body_format: json
    body:
      username: "{{ rancher_default_username }}"
      password: "{{ rancher_new_password }}"
    status_code: 201
  register: login
  when: login.status  | int == 401

- name: Setting host facts using complex arguments
  set_fact:
    rancher_token: "{{ login.json['token']  }}"

## Change password
#curl -s 'https://127.0.0.1/v3/users?action=changepassword' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"currentPassword":"admin","newPassword":"thisisyournewpassword"}' --insecure

- name: Rancher change password
  uri:
    url: "https://{{ rancher_server_ip }}/v3/users?action=changepassword"
    method: POST
    return_content: yes
    validate_certs: no
    body_format: json
    headers:
      Content-Type: application/json
      Authorization: Bearer {{ rancher_token }}
    body:
      currentPassword: "{{ rancher_default_password }}"
      newPassword: "{{ rancher_new_password }}"
    status_code: 200
  register: result
  when: rancher_new_password_activated == "no"

# Create API key
#APIRESPONSE=`curl -s 'https://127.0.0.1/v3/token' -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"type":"token","description":"automation"}' --insecure`

- name: Rancher create api key
  uri:
    url: "https://{{ rancher_server_ip }}/v3/token"
    method: POST
    return_content: yes
    validate_certs: no
    body_format: json
    headers:
      Content-Type: application/json
      Authorization: Bearer {{ rancher_token }}
    body:
      type: "token"
      description: "automation"
    status_code: 201
  register: result

- name: Setting rancher_api_key variable
  set_fact:
    rancher_api_key: "{{ result.json['token']  }}"

# Set server-url
#RANCHER_SERVER=https://your_rancher_server.com
#curl -s 'https://127.0.0.1/v3/settings/server-url' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" -X PUT --data-binary '{"name":"server-url","value":"'$RANCHER_SERVER'"}' --insecure > /dev/null

- name: Rancher set server URL
  uri:
    url: "https://{{ rancher_server_ip }}/v3/settings/server-url"
    method: PUT
    return_content: yes
    validate_certs: no
    body_format: json
    headers:
      Content-Type: application/json
      Authorization: Bearer {{ rancher_api_key }}
    body:
      name: "server-url"
      value: "https://{{ rancher_server_ip }}"
    status_code: 200
  register: result
  when: tested == "no"

# # Create cluster
# CLUSTERRESPONSE=`curl -s 'https://127.0.0.1/v3/cluster' -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"dockerRootDir":"/var/lib/docker","enableNetworkPolicy":false,"type":"cluster","rancherKubernetesEngineConfig":{"addonJobTimeout":30,"ignoreDockerVersion":true,"sshAgentAuth":false,"type":"rancherKubernetesEngineConfig","authentication":{"type":"authnConfig","strategy":"x509"},"network":{"type":"networkConfig","plugin":"canal"},"ingress":{"type":"ingressConfig","provider":"nginx"},"monitoring":{"type":"monitoringConfig","provider":"metrics-server"},"services":{"type":"rkeConfigServices","kubeApi":{"podSecurityPolicy":false,"type":"kubeAPIService"},"etcd":{"snapshot":false,"type":"etcdService","extraArgs":{"heartbeat-interval":500,"election-timeout":5000}}}},"name":"yournewcluster"}' --insecure`
# # Extract clusterid to use for generating the docker run command
# CLUSTERID=`echo $CLUSTERRESPONSE | jq -r .id`

# - name: Rancher create cluster
#   uri:
#     url: "https://{{ rancher_server_ip }}/v3/cluster"
#     method: POST
#     return_content: yes
#     validate_certs: no
#     headers:
#       Content-Type: application/json
#       Authorization: Bearer {{ rancher_api_key }}
#     body: "{{ lookup('file','cluster.json') }}"
#     body_format: json
#     status_code: 201
#   register: result

- name: debug pring json
  debug:
    msg: "{{ lookup('template', 'openldap.json.j2') }}"

- name: Rancher activate OpenLDAP
  uri:
    url: "https://{{ rancher_server_ip }}/v3/openLdapConfigs/openldap?action=testAndApply"
    method: POST
    return_content: yes
    validate_certs: no
    body_format: json
    headers:
      Content-Type: application/json
      Authorization: Bearer {{ rancher_api_key }}
    body: "{{ lookup('template', 'openldap.json.j2') }}"
    status_code: 200
  register: result
  when: tested == "no"

#==============================

- name: Rancher try login via OpenLDAP
  vars:
    rancher_new_password_activated: "yes"
  uri:
    url: "https://{{ rancher_server_ip }}/v3-public/openLdapProviders/openldap?action=login"
    method: POST
    return_content: yes
    validate_certs: no
    body_format: json
    body:
      username: "user01"
      password: "password1"
    status_code: 201
  register: login

- name:
  debug:
    msg: "Login OK, {{ login.json['userPrincipal'] }}"
  when: login.status == 201
